# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float): DocumentConnection!
  getDocumentFields: JSON!
  getPageDocument(relativePath: String): PageDocument!
  getPageList(before: String, after: String, first: Float, last: Float): PageConnection!
  getLegalDocument(relativePath: String): LegalDocument!
  getLegalList(before: String, after: String, first: Float, last: Float): LegalConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float): DocumentConnection!
}

union DocumentNode = PageDocument | LegalDocument

type PageSeo_data {
  meta_title: String
  meta_description: String
  meta_canonical: String
}

type PageHero {
  hero_heading: String
  hero_description: JSON
  hero_button_text: String
  hero_image: String
  hero_image_alt: String
}

type PageBlocksCall_to_action {
  heading: String
  button_text: String
}

type PageBlocksMeet_the_teamTeam_members {
  name: String
  position: String
  avatar: String
}

type PageBlocksMeet_the_team {
  heading: String
  description: JSON
  team_members: [PageBlocksMeet_the_teamTeam_members]
}

type PageBlocksOur_servicesServices {
  service_title: String
  service_description: String
}

type PageBlocksOur_services {
  heading: String
  services_description: JSON
  services: [PageBlocksOur_servicesServices]
  services_mission: String
}

type PageBlocksPowered_by_data {
  heading: String
  content: JSON
  image: String
  image_alt: String
}

type PageBlocksWho_we_work_withCharities {
  charity_name: String
  charity_logo: String
}

type PageBlocksWho_we_work_with {
  heading: String
  content: JSON
  charities: [PageBlocksWho_we_work_withCharities]
}

type PageBlocksWhy_rg {
  heading: String
  content: JSON
}

union PageBlocks = PageBlocksCall_to_action | PageBlocksMeet_the_team | PageBlocksOur_services | PageBlocksPowered_by_data | PageBlocksWho_we_work_with | PageBlocksWhy_rg

type Page {
  seo_data: PageSeo_data
  hero: PageHero
  blocks: [PageBlocks]
}

type PageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Page!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PageConnectionEdges {
  cursor: String
  node: PageDocument
}

type PageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type LegalSeo_data {
  meta_title: String
  meta_description: String
  meta_canonical: String
}

type LegalHero {
  hero_heading: String
  hero_description: String
}

type Legal {
  seo_data: LegalSeo_data
  hero: LegalHero
  body: JSON
}

type LegalDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Legal!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type LegalConnectionEdges {
  cursor: String
  node: LegalDocument
}

type LegalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [LegalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePageDocument(relativePath: String!, params: PageMutation!): PageDocument!
  createPageDocument(relativePath: String!, params: PageMutation!): PageDocument!
  updateLegalDocument(relativePath: String!, params: LegalMutation!): LegalDocument!
  createLegalDocument(relativePath: String!, params: LegalMutation!): LegalDocument!
}

input DocumentMutation {
  page: PageMutation
  legal: LegalMutation
}

input PageSeo_dataMutation {
  meta_title: String
  meta_description: String
  meta_canonical: String
}

input PageHeroMutation {
  hero_heading: String
  hero_description: JSON
  hero_button_text: String
  hero_image: String
  hero_image_alt: String
}

input PageBlocksCall_to_actionMutation {
  heading: String
  button_text: String
}

input PageBlocksMeet_the_teamTeam_membersMutation {
  name: String
  position: String
  avatar: String
}

input PageBlocksMeet_the_teamMutation {
  heading: String
  description: JSON
  team_members: [PageBlocksMeet_the_teamTeam_membersMutation]
}

input PageBlocksOur_servicesServicesMutation {
  service_title: String
  service_description: String
}

input PageBlocksOur_servicesMutation {
  heading: String
  services_description: JSON
  services: [PageBlocksOur_servicesServicesMutation]
  services_mission: String
}

input PageBlocksPowered_by_dataMutation {
  heading: String
  content: JSON
  image: String
  image_alt: String
}

input PageBlocksWho_we_work_withCharitiesMutation {
  charity_name: String
  charity_logo: String
}

input PageBlocksWho_we_work_withMutation {
  heading: String
  content: JSON
  charities: [PageBlocksWho_we_work_withCharitiesMutation]
}

input PageBlocksWhy_rgMutation {
  heading: String
  content: JSON
}

input PageBlocksMutation {
  call_to_action: PageBlocksCall_to_actionMutation
  meet_the_team: PageBlocksMeet_the_teamMutation
  our_services: PageBlocksOur_servicesMutation
  powered_by_data: PageBlocksPowered_by_dataMutation
  who_we_work_with: PageBlocksWho_we_work_withMutation
  why_rg: PageBlocksWhy_rgMutation
}

input PageMutation {
  seo_data: PageSeo_dataMutation
  hero: PageHeroMutation
  blocks: [PageBlocksMutation]
}

input LegalSeo_dataMutation {
  meta_title: String
  meta_description: String
  meta_canonical: String
}

input LegalHeroMutation {
  hero_heading: String
  hero_description: String
}

input LegalMutation {
  seo_data: LegalSeo_dataMutation
  hero: LegalHeroMutation
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  