# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(before: String, after: String, first: Int, last: Int): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PagesDocument

type PagesSeo_data {
  meta_title: String
  meta_description: String
  meta_canonical: String
}

type PagesHero {
  hero_heading: String
  hero_description: String
  hero_button_text: String
}

type PagesContent_sectionsCall_to_action {
  heading: String
  button_text: String
}

type PagesContent_sectionsMeet_the_teamTeam_members {
  name: String
  position: String
  avatar: String
}

type PagesContent_sectionsMeet_the_team {
  heading: String
  description: String
  team_members: [PagesContent_sectionsMeet_the_teamTeam_members]
}

union PagesContent_sections = PagesContent_sectionsCall_to_action | PagesContent_sectionsMeet_the_team

type Pages {
  seo_data: PagesSeo_data
  hero: PagesHero
  content_sections: [PagesContent_sections]
}

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
  createPagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
}

input DocumentMutation {
  pages: PagesMutation
}

input PagesSeo_dataMutation {
  meta_title: String
  meta_description: String
  meta_canonical: String
}

input PagesHeroMutation {
  hero_heading: String
  hero_description: String
  hero_button_text: String
}

input PagesContent_sectionsCall_to_actionMutation {
  heading: String
  button_text: String
}

input PagesContent_sectionsMeet_the_teamTeam_membersMutation {
  name: String
  position: String
  avatar: String
}

input PagesContent_sectionsMeet_the_teamMutation {
  heading: String
  description: String
  team_members: [PagesContent_sectionsMeet_the_teamTeam_membersMutation]
}

input PagesContent_sectionsMutation {
  call_to_action: PagesContent_sectionsCall_to_actionMutation
  meet_the_team: PagesContent_sectionsMeet_the_teamMutation
}

input PagesMutation {
  seo_data: PagesSeo_dataMutation
  hero: PagesHeroMutation
  content_sections: [PagesContent_sectionsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  